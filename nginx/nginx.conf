# Load modules
load_module modules/ngx_http_auth_jwt_module.so;

worker_processes 1;

events { worker_connections 1024; }


http {

    # TLS конфигурация
    ssl_session_cache           shared:SSL:20m;
    ssl_session_timeout         10m;
    ssl_protocols               TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    add_header                  Strict-Transport-Security "max-age=15768000" always;
    ssl_certificate      /etc/nginx/certs/server.pem;   # Укажите путь к вашему SSL сертификату
    ssl_certificate_key  /etc/nginx/certs/server.key;   # Укажите путь к вашему SSL ключу
    ssl_client_certificate /etc/nginx/certs/ca.crt;     # Проверка клиентского сертификата
    ssl_verify_client on;

    auth_jwt_use_keyfile on;
    auth_jwt_keyfile_path /etc/nginx/opensslkeys/public_key.pem;  # ключ для проверки авторизированного токена

    # HTTP сервер для перенаправления на HTTPS
        server {
            listen 80;  # HTTP порт
            listen [::]:80;

            # server_name yourdomain.com;  # Замените на ваш домен

            # Перенаправление на HTTPS
            return 301 https://nginx:443;
        }

    server {
        listen 443 ssl;  # Включаем SSL и HTTP/2 для gRPC
        listen [::]:443 ssl;

        http2 on;

        #we need this to enable redirection of 502 code inside @not-found location
        recursive_error_pages on;

        auth_jwt_enabled on;  # Включить JWT аутентификацию для всех путей, начинающихся с /auth/
        auth_jwt_algorithm RS256;  # Укажите алгоритм RS256

        location ~ ^/protobuff\.AuthService/(Register|Login)$ {
            auth_jwt_enabled off;

            grpc_pass grpcs://auth:50055;  # Прокси для gRPC сервиса
            grpc_ssl_certificate /etc/nginx/certs/server.pem; # Проверка сертификата на совместимость https
            grpc_ssl_certificate_key /etc/nginx/certs/server.key; # Проверка ключа подписи на совместимость https

            #Обработка ошибки не авторизированного пользователя
            error_page 400 = /error400;
            error_page 401 = /error401;
            error_page 502 = /error502;
        }

        location /auth {

                    auth_jwt_enabled off;  # Включить JWT аутентификацию для всех путей, начинающихся с /auth/
                    auth_jwt_algorithm RS256;  # Укажите алгоритм RS256

                    proxy_pass https://auth:50056;  # Прокси запросы на auth сервис через upstream

                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ ^/protobuff\.dbService/(RegisterCompany|LoginDB|StartTimerDB|EndTimerDB|ChangeTimerDB|AddTimerDB)$ {

            auth_jwt_enabled on;

            grpc_pass grpcs://dbservice:8081;  # Прокси для gRPC сервиса
            grpc_ssl_certificate /etc/nginx/certs/server.pem; # Проверка сертификата на совместимость https
            grpc_ssl_certificate_key /etc/nginx/certs/server.key; # Проверка ключа подписи на совместимость https

            #Обработка ошибки не авторизированного пользователя
            error_page 400 = /error400;
            error_page 401 = /error401;
            error_page 502 = /error502;
        }

        location ~ ^/protobuff\.TimerService/(StartTimer|EndTimer|GetWorkingTimer|ChangeTimer|AddTimer)$ {
                    auth_jwt_enabled on;

                    grpc_pass grpcs://timer:50020;  # Прокси для gRPC сервиса
                    grpc_ssl_certificate /etc/nginx/certs/server.pem; # Проверка сертификата на совместимость https
                    grpc_ssl_certificate_key /etc/nginx/certs/server.key; # Проверка ключа подписи на совместимость https

                    error_page 400 = /error400;
                    error_page 401 = /error401;
                    error_page 502 = /error502;

                }

        location ~ ^/protobuff\.RedisService/(Save|Get)$ {
            auth_jwt_enabled on;

            grpc_pass grpcs://redis:50060;  # Прокси для gRPC сервиса
            grpc_ssl_certificate /etc/nginx/certs/server.pem; # Проверка сертификата на совместимость https
            grpc_ssl_certificate_key /etc/nginx/certs/server.key; # Проверка ключа подписи на совместимость https

            error_page 400 = /error400;
            error_page 401 = /error401;
            error_page 502 = /error502;

        }

        error_page 400 = /error400;
        error_page 401 = /error401;
        error_page 502 = /error502;

       location = /error400 {

                    default_type application/json;
                    add_header Content-Type 'application/json; charset=utf-8';
                    return 401 '{"status":"400","result":"Некорректный адрес обращения"}';
       }

       location = /error401 {
                    default_type application/json;
                    add_header Content-Type 'application/json; charset=utf-8';
                    return 401 '{"status":"401","result":"Пользователь, не авторизирован."}';
       }

       location = /error502 {
                           default_type application/json;
                           add_header Content-Type 'application/json; charset=utf-8';
                           return 502 '{"status":"502","result":"Пользователь, не авторизирован."}';
       }
    }
}
