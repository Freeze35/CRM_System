// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: dbservice/proto/dbtimer.proto

package dbtimer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbTimerService_StartTimerDB_FullMethodName      = "/protobuff.dbTimerService/StartTimerDB"
	DbTimerService_EndTimerDB_FullMethodName        = "/protobuff.dbTimerService/EndTimerDB"
	DbTimerService_GetWorkingTimerDB_FullMethodName = "/protobuff.dbTimerService/GetWorkingTimerDB"
	DbTimerService_ChangeTimerDB_FullMethodName     = "/protobuff.dbTimerService/ChangeTimerDB"
	DbTimerService_AddTimerDB_FullMethodName        = "/protobuff.dbTimerService/AddTimerDB"
)

// DbTimerServiceClient is the client API for DbTimerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbTimerServiceClient interface {
	// Запускаем новый таймер
	StartTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error)
	// Завершаем работу таймера
	EndTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error)
	// Получаем активный таймер
	GetWorkingTimerDB(ctx context.Context, in *WorkingTimerRequestDB, opts ...grpc.CallOption) (*WorkingTimerResponseDB, error)
	// Изменяет таймер необходимым образом
	ChangeTimerDB(ctx context.Context, in *ChangeTimerRequestDB, opts ...grpc.CallOption) (*ChangeTimerResponseDB, error)
	// Добавляем необходимый таймер
	AddTimerDB(ctx context.Context, in *AddTimerRequestDB, opts ...grpc.CallOption) (*AddTimerResponseDB, error)
}

type dbTimerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbTimerServiceClient(cc grpc.ClientConnInterface) DbTimerServiceClient {
	return &dbTimerServiceClient{cc}
}

func (c *dbTimerServiceClient) StartTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEndTimerResponseDB)
	err := c.cc.Invoke(ctx, DbTimerService_StartTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbTimerServiceClient) EndTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEndTimerResponseDB)
	err := c.cc.Invoke(ctx, DbTimerService_EndTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbTimerServiceClient) GetWorkingTimerDB(ctx context.Context, in *WorkingTimerRequestDB, opts ...grpc.CallOption) (*WorkingTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkingTimerResponseDB)
	err := c.cc.Invoke(ctx, DbTimerService_GetWorkingTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbTimerServiceClient) ChangeTimerDB(ctx context.Context, in *ChangeTimerRequestDB, opts ...grpc.CallOption) (*ChangeTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeTimerResponseDB)
	err := c.cc.Invoke(ctx, DbTimerService_ChangeTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbTimerServiceClient) AddTimerDB(ctx context.Context, in *AddTimerRequestDB, opts ...grpc.CallOption) (*AddTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTimerResponseDB)
	err := c.cc.Invoke(ctx, DbTimerService_AddTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbTimerServiceServer is the server API for DbTimerService service.
// All implementations must embed UnimplementedDbTimerServiceServer
// for forward compatibility.
type DbTimerServiceServer interface {
	// Запускаем новый таймер
	StartTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error)
	// Завершаем работу таймера
	EndTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error)
	// Получаем активный таймер
	GetWorkingTimerDB(context.Context, *WorkingTimerRequestDB) (*WorkingTimerResponseDB, error)
	// Изменяет таймер необходимым образом
	ChangeTimerDB(context.Context, *ChangeTimerRequestDB) (*ChangeTimerResponseDB, error)
	// Добавляем необходимый таймер
	AddTimerDB(context.Context, *AddTimerRequestDB) (*AddTimerResponseDB, error)
	mustEmbedUnimplementedDbTimerServiceServer()
}

// UnimplementedDbTimerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbTimerServiceServer struct{}

func (UnimplementedDbTimerServiceServer) StartTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTimerDB not implemented")
}
func (UnimplementedDbTimerServiceServer) EndTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTimerDB not implemented")
}
func (UnimplementedDbTimerServiceServer) GetWorkingTimerDB(context.Context, *WorkingTimerRequestDB) (*WorkingTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkingTimerDB not implemented")
}
func (UnimplementedDbTimerServiceServer) ChangeTimerDB(context.Context, *ChangeTimerRequestDB) (*ChangeTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTimerDB not implemented")
}
func (UnimplementedDbTimerServiceServer) AddTimerDB(context.Context, *AddTimerRequestDB) (*AddTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimerDB not implemented")
}
func (UnimplementedDbTimerServiceServer) mustEmbedUnimplementedDbTimerServiceServer() {}
func (UnimplementedDbTimerServiceServer) testEmbeddedByValue()                        {}

// UnsafeDbTimerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbTimerServiceServer will
// result in compilation errors.
type UnsafeDbTimerServiceServer interface {
	mustEmbedUnimplementedDbTimerServiceServer()
}

func RegisterDbTimerServiceServer(s grpc.ServiceRegistrar, srv DbTimerServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbTimerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbTimerService_ServiceDesc, srv)
}

func _DbTimerService_StartTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEndTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbTimerServiceServer).StartTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbTimerService_StartTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbTimerServiceServer).StartTimerDB(ctx, req.(*StartEndTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbTimerService_EndTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEndTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbTimerServiceServer).EndTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbTimerService_EndTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbTimerServiceServer).EndTimerDB(ctx, req.(*StartEndTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbTimerService_GetWorkingTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkingTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbTimerServiceServer).GetWorkingTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbTimerService_GetWorkingTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbTimerServiceServer).GetWorkingTimerDB(ctx, req.(*WorkingTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbTimerService_ChangeTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbTimerServiceServer).ChangeTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbTimerService_ChangeTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbTimerServiceServer).ChangeTimerDB(ctx, req.(*ChangeTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbTimerService_AddTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbTimerServiceServer).AddTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbTimerService_AddTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbTimerServiceServer).AddTimerDB(ctx, req.(*AddTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

// DbTimerService_ServiceDesc is the grpc.ServiceDesc for DbTimerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbTimerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.dbTimerService",
	HandlerType: (*DbTimerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTimerDB",
			Handler:    _DbTimerService_StartTimerDB_Handler,
		},
		{
			MethodName: "EndTimerDB",
			Handler:    _DbTimerService_EndTimerDB_Handler,
		},
		{
			MethodName: "GetWorkingTimerDB",
			Handler:    _DbTimerService_GetWorkingTimerDB_Handler,
		},
		{
			MethodName: "ChangeTimerDB",
			Handler:    _DbTimerService_ChangeTimerDB_Handler,
		},
		{
			MethodName: "AddTimerDB",
			Handler:    _DbTimerService_AddTimerDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbservice/proto/dbtimer.proto",
}
