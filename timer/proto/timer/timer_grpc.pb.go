// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: timer/proto/timer.proto

package timer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimerService_SaveTimer_FullMethodName    = "/protobuff.TimerService/SaveTimer"
	TimerService_GetOpenTimer_FullMethodName = "/protobuff.TimerService/GetOpenTimer"
)

// TimerServiceClient is the client API for TimerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimerServiceClient interface {
	// Метод для регистрации
	SaveTimer(ctx context.Context, in *SaveTimerRequest, opts ...grpc.CallOption) (*SaveTimerResponse, error)
	GetOpenTimer(ctx context.Context, in *GetTimerRequest, opts ...grpc.CallOption) (*GetTimerResponse, error)
}

type timerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimerServiceClient(cc grpc.ClientConnInterface) TimerServiceClient {
	return &timerServiceClient{cc}
}

func (c *timerServiceClient) SaveTimer(ctx context.Context, in *SaveTimerRequest, opts ...grpc.CallOption) (*SaveTimerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTimerResponse)
	err := c.cc.Invoke(ctx, TimerService_SaveTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timerServiceClient) GetOpenTimer(ctx context.Context, in *GetTimerRequest, opts ...grpc.CallOption) (*GetTimerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimerResponse)
	err := c.cc.Invoke(ctx, TimerService_GetOpenTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimerServiceServer is the server API for TimerService service.
// All implementations must embed UnimplementedTimerServiceServer
// for forward compatibility.
type TimerServiceServer interface {
	// Метод для регистрации
	SaveTimer(context.Context, *SaveTimerRequest) (*SaveTimerResponse, error)
	GetOpenTimer(context.Context, *GetTimerRequest) (*GetTimerResponse, error)
	mustEmbedUnimplementedTimerServiceServer()
}

// UnimplementedTimerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimerServiceServer struct{}

func (UnimplementedTimerServiceServer) SaveTimer(context.Context, *SaveTimerRequest) (*SaveTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTimer not implemented")
}
func (UnimplementedTimerServiceServer) GetOpenTimer(context.Context, *GetTimerRequest) (*GetTimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenTimer not implemented")
}
func (UnimplementedTimerServiceServer) mustEmbedUnimplementedTimerServiceServer() {}
func (UnimplementedTimerServiceServer) testEmbeddedByValue()                      {}

// UnsafeTimerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimerServiceServer will
// result in compilation errors.
type UnsafeTimerServiceServer interface {
	mustEmbedUnimplementedTimerServiceServer()
}

func RegisterTimerServiceServer(s grpc.ServiceRegistrar, srv TimerServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimerService_ServiceDesc, srv)
}

func _TimerService_SaveTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).SaveTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimerService_SaveTimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).SaveTimer(ctx, req.(*SaveTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimerService_GetOpenTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimerServiceServer).GetOpenTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimerService_GetOpenTimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimerServiceServer).GetOpenTimer(ctx, req.(*GetTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimerService_ServiceDesc is the grpc.ServiceDesc for TimerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.TimerService",
	HandlerType: (*TimerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTimer",
			Handler:    _TimerService_SaveTimer_Handler,
		},
		{
			MethodName: "GetOpenTimer",
			Handler:    _TimerService_GetOpenTimer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timer/proto/timer.proto",
}
