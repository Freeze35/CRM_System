// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: dbservice/proto/dbservice.proto

package dbservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbService_RegisterCompany_FullMethodName   = "/protobuff.dbService/RegisterCompany"
	DbService_LoginDB_FullMethodName           = "/protobuff.dbService/LoginDB"
	DbService_SaveMessage_FullMethodName       = "/protobuff.dbService/SaveMessage"
	DbService_StartTimerDB_FullMethodName      = "/protobuff.dbService/StartTimerDB"
	DbService_EndTimerDB_FullMethodName        = "/protobuff.dbService/EndTimerDB"
	DbService_GetWorkingTimerDB_FullMethodName = "/protobuff.dbService/GetWorkingTimerDB"
	DbService_ChangeTimerDB_FullMethodName     = "/protobuff.dbService/ChangeTimerDB"
	DbService_AddTimerDB_FullMethodName        = "/protobuff.dbService/AddTimerDB"
)

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbServiceClient interface {
	// Метод для регистрации
	RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error)
	// Метод для логинизации
	LoginDB(ctx context.Context, in *LoginDBRequest, opts ...grpc.CallOption) (*LoginDBResponse, error)
	// Сохранения сообщения в базе данных
	SaveMessage(ctx context.Context, in *SaveMessageRequest, opts ...grpc.CallOption) (*SaveMessageResponse, error)
	// Запускаем новый таймер
	StartTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error)
	// Завершаем работу таймера
	EndTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error)
	// Получаем активный таймер
	GetWorkingTimerDB(ctx context.Context, in *WorkingTimerRequestDB, opts ...grpc.CallOption) (*WorkingTimerResponseDB, error)
	// Изменяет таймер необходимым образом
	ChangeTimerDB(ctx context.Context, in *ChangeTimerRequestDB, opts ...grpc.CallOption) (*ChangeTimerResponseDB, error)
	// Добавляем необходимый таймер
	AddTimerDB(ctx context.Context, in *AddTimerRequestDB, opts ...grpc.CallOption) (*AddTimerResponseDB, error)
}

type dbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbServiceClient(cc grpc.ClientConnInterface) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCompanyResponse)
	err := c.cc.Invoke(ctx, DbService_RegisterCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) LoginDB(ctx context.Context, in *LoginDBRequest, opts ...grpc.CallOption) (*LoginDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginDBResponse)
	err := c.cc.Invoke(ctx, DbService_LoginDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) SaveMessage(ctx context.Context, in *SaveMessageRequest, opts ...grpc.CallOption) (*SaveMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveMessageResponse)
	err := c.cc.Invoke(ctx, DbService_SaveMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) StartTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEndTimerResponseDB)
	err := c.cc.Invoke(ctx, DbService_StartTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) EndTimerDB(ctx context.Context, in *StartEndTimerRequestDB, opts ...grpc.CallOption) (*StartEndTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartEndTimerResponseDB)
	err := c.cc.Invoke(ctx, DbService_EndTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) GetWorkingTimerDB(ctx context.Context, in *WorkingTimerRequestDB, opts ...grpc.CallOption) (*WorkingTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkingTimerResponseDB)
	err := c.cc.Invoke(ctx, DbService_GetWorkingTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) ChangeTimerDB(ctx context.Context, in *ChangeTimerRequestDB, opts ...grpc.CallOption) (*ChangeTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeTimerResponseDB)
	err := c.cc.Invoke(ctx, DbService_ChangeTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) AddTimerDB(ctx context.Context, in *AddTimerRequestDB, opts ...grpc.CallOption) (*AddTimerResponseDB, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTimerResponseDB)
	err := c.cc.Invoke(ctx, DbService_AddTimerDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
// All implementations must embed UnimplementedDbServiceServer
// for forward compatibility.
type DbServiceServer interface {
	// Метод для регистрации
	RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error)
	// Метод для логинизации
	LoginDB(context.Context, *LoginDBRequest) (*LoginDBResponse, error)
	// Сохранения сообщения в базе данных
	SaveMessage(context.Context, *SaveMessageRequest) (*SaveMessageResponse, error)
	// Запускаем новый таймер
	StartTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error)
	// Завершаем работу таймера
	EndTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error)
	// Получаем активный таймер
	GetWorkingTimerDB(context.Context, *WorkingTimerRequestDB) (*WorkingTimerResponseDB, error)
	// Изменяет таймер необходимым образом
	ChangeTimerDB(context.Context, *ChangeTimerRequestDB) (*ChangeTimerResponseDB, error)
	// Добавляем необходимый таймер
	AddTimerDB(context.Context, *AddTimerRequestDB) (*AddTimerResponseDB, error)
	mustEmbedUnimplementedDbServiceServer()
}

// UnimplementedDbServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbServiceServer struct{}

func (UnimplementedDbServiceServer) RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedDbServiceServer) LoginDB(context.Context, *LoginDBRequest) (*LoginDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDB not implemented")
}
func (UnimplementedDbServiceServer) SaveMessage(context.Context, *SaveMessageRequest) (*SaveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (UnimplementedDbServiceServer) StartTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTimerDB not implemented")
}
func (UnimplementedDbServiceServer) EndTimerDB(context.Context, *StartEndTimerRequestDB) (*StartEndTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTimerDB not implemented")
}
func (UnimplementedDbServiceServer) GetWorkingTimerDB(context.Context, *WorkingTimerRequestDB) (*WorkingTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkingTimerDB not implemented")
}
func (UnimplementedDbServiceServer) ChangeTimerDB(context.Context, *ChangeTimerRequestDB) (*ChangeTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTimerDB not implemented")
}
func (UnimplementedDbServiceServer) AddTimerDB(context.Context, *AddTimerRequestDB) (*AddTimerResponseDB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimerDB not implemented")
}
func (UnimplementedDbServiceServer) mustEmbedUnimplementedDbServiceServer() {}
func (UnimplementedDbServiceServer) testEmbeddedByValue()                   {}

// UnsafeDbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServiceServer will
// result in compilation errors.
type UnsafeDbServiceServer interface {
	mustEmbedUnimplementedDbServiceServer()
}

func RegisterDbServiceServer(s grpc.ServiceRegistrar, srv DbServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbService_ServiceDesc, srv)
}

func _DbService_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_RegisterCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).RegisterCompany(ctx, req.(*RegisterCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_LoginDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).LoginDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_LoginDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).LoginDB(ctx, req.(*LoginDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_SaveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).SaveMessage(ctx, req.(*SaveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_StartTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEndTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).StartTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_StartTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).StartTimerDB(ctx, req.(*StartEndTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_EndTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartEndTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).EndTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_EndTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).EndTimerDB(ctx, req.(*StartEndTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_GetWorkingTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkingTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).GetWorkingTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_GetWorkingTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).GetWorkingTimerDB(ctx, req.(*WorkingTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_ChangeTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).ChangeTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_ChangeTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).ChangeTimerDB(ctx, req.(*ChangeTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_AddTimerDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTimerRequestDB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).AddTimerDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbService_AddTimerDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).AddTimerDB(ctx, req.(*AddTimerRequestDB))
	}
	return interceptor(ctx, in, info, handler)
}

// DbService_ServiceDesc is the grpc.ServiceDesc for DbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.dbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCompany",
			Handler:    _DbService_RegisterCompany_Handler,
		},
		{
			MethodName: "LoginDB",
			Handler:    _DbService_LoginDB_Handler,
		},
		{
			MethodName: "SaveMessage",
			Handler:    _DbService_SaveMessage_Handler,
		},
		{
			MethodName: "StartTimerDB",
			Handler:    _DbService_StartTimerDB_Handler,
		},
		{
			MethodName: "EndTimerDB",
			Handler:    _DbService_EndTimerDB_Handler,
		},
		{
			MethodName: "GetWorkingTimerDB",
			Handler:    _DbService_GetWorkingTimerDB_Handler,
		},
		{
			MethodName: "ChangeTimerDB",
			Handler:    _DbService_ChangeTimerDB_Handler,
		},
		{
			MethodName: "AddTimerDB",
			Handler:    _DbService_AddTimerDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbservice/proto/dbservice.proto",
}
