// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: dbservice/proto/dbchat.proto

package dbchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbChatService_CreateChat_FullMethodName  = "/protobuff.dbChatService/CreateChat"
	DbChatService_SaveMessage_FullMethodName = "/protobuff.dbChatService/SaveMessage"
)

// DbChatServiceClient is the client API for DbChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbChatServiceClient interface {
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	SaveMessage(ctx context.Context, in *SaveMessageRequest, opts ...grpc.CallOption) (*SaveMessageResponse, error)
}

type dbChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbChatServiceClient(cc grpc.ClientConnInterface) DbChatServiceClient {
	return &dbChatServiceClient{cc}
}

func (c *dbChatServiceClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, DbChatService_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbChatServiceClient) SaveMessage(ctx context.Context, in *SaveMessageRequest, opts ...grpc.CallOption) (*SaveMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveMessageResponse)
	err := c.cc.Invoke(ctx, DbChatService_SaveMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbChatServiceServer is the server API for DbChatService service.
// All implementations must embed UnimplementedDbChatServiceServer
// for forward compatibility.
type DbChatServiceServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	SaveMessage(context.Context, *SaveMessageRequest) (*SaveMessageResponse, error)
	mustEmbedUnimplementedDbChatServiceServer()
}

// UnimplementedDbChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbChatServiceServer struct{}

func (UnimplementedDbChatServiceServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedDbChatServiceServer) SaveMessage(context.Context, *SaveMessageRequest) (*SaveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMessage not implemented")
}
func (UnimplementedDbChatServiceServer) mustEmbedUnimplementedDbChatServiceServer() {}
func (UnimplementedDbChatServiceServer) testEmbeddedByValue()                       {}

// UnsafeDbChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbChatServiceServer will
// result in compilation errors.
type UnsafeDbChatServiceServer interface {
	mustEmbedUnimplementedDbChatServiceServer()
}

func RegisterDbChatServiceServer(s grpc.ServiceRegistrar, srv DbChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbChatService_ServiceDesc, srv)
}

func _DbChatService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbChatServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbChatService_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbChatServiceServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbChatService_SaveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbChatServiceServer).SaveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbChatService_SaveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbChatServiceServer).SaveMessage(ctx, req.(*SaveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbChatService_ServiceDesc is the grpc.ServiceDesc for DbChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.dbChatService",
	HandlerType: (*DbChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _DbChatService_CreateChat_Handler,
		},
		{
			MethodName: "SaveMessage",
			Handler:    _DbChatService_SaveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbservice/proto/dbchat.proto",
}
