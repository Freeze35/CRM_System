// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/dbauth/dbauth_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dbauth "crmSystem/proto/dbauth"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDbAuthServiceClient is a mock of DbAuthServiceClient interface.
type MockDbAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDbAuthServiceClientMockRecorder
}

// MockDbAuthServiceClientMockRecorder is the mock recorder for MockDbAuthServiceClient.
type MockDbAuthServiceClientMockRecorder struct {
	mock *MockDbAuthServiceClient
}

// NewMockDbAuthServiceClient creates a new mock instance.
func NewMockDbAuthServiceClient(ctrl *gomock.Controller) *MockDbAuthServiceClient {
	mock := &MockDbAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockDbAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbAuthServiceClient) EXPECT() *MockDbAuthServiceClientMockRecorder {
	return m.recorder
}

// LoginDB mocks base method.
func (m *MockDbAuthServiceClient) LoginDB(ctx context.Context, in *dbauth.LoginDBRequest, opts ...grpc.CallOption) (*dbauth.LoginDBResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginDB", varargs...)
	ret0, _ := ret[0].(*dbauth.LoginDBResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginDB indicates an expected call of LoginDB.
func (mr *MockDbAuthServiceClientMockRecorder) LoginDB(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginDB", reflect.TypeOf((*MockDbAuthServiceClient)(nil).LoginDB), varargs...)
}

// RegisterCompany mocks base method.
func (m *MockDbAuthServiceClient) RegisterCompany(ctx context.Context, in *dbauth.RegisterCompanyRequest, opts ...grpc.CallOption) (*dbauth.RegisterCompanyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterCompany", varargs...)
	ret0, _ := ret[0].(*dbauth.RegisterCompanyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCompany indicates an expected call of RegisterCompany.
func (mr *MockDbAuthServiceClientMockRecorder) RegisterCompany(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCompany", reflect.TypeOf((*MockDbAuthServiceClient)(nil).RegisterCompany), varargs...)
}

// MockDbAuthServiceServer is a mock of DbAuthServiceServer interface.
type MockDbAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDbAuthServiceServerMockRecorder
}

// MockDbAuthServiceServerMockRecorder is the mock recorder for MockDbAuthServiceServer.
type MockDbAuthServiceServerMockRecorder struct {
	mock *MockDbAuthServiceServer
}

// NewMockDbAuthServiceServer creates a new mock instance.
func NewMockDbAuthServiceServer(ctrl *gomock.Controller) *MockDbAuthServiceServer {
	mock := &MockDbAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockDbAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbAuthServiceServer) EXPECT() *MockDbAuthServiceServerMockRecorder {
	return m.recorder
}

// LoginDB mocks base method.
func (m *MockDbAuthServiceServer) LoginDB(arg0 context.Context, arg1 *dbauth.LoginDBRequest) (*dbauth.LoginDBResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginDB", arg0, arg1)
	ret0, _ := ret[0].(*dbauth.LoginDBResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginDB indicates an expected call of LoginDB.
func (mr *MockDbAuthServiceServerMockRecorder) LoginDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginDB", reflect.TypeOf((*MockDbAuthServiceServer)(nil).LoginDB), arg0, arg1)
}

// RegisterCompany mocks base method.
func (m *MockDbAuthServiceServer) RegisterCompany(arg0 context.Context, arg1 *dbauth.RegisterCompanyRequest) (*dbauth.RegisterCompanyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCompany", arg0, arg1)
	ret0, _ := ret[0].(*dbauth.RegisterCompanyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCompany indicates an expected call of RegisterCompany.
func (mr *MockDbAuthServiceServerMockRecorder) RegisterCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCompany", reflect.TypeOf((*MockDbAuthServiceServer)(nil).RegisterCompany), arg0, arg1)
}

// mustEmbedUnimplementedDbAuthServiceServer mocks base method.
func (m *MockDbAuthServiceServer) mustEmbedUnimplementedDbAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDbAuthServiceServer")
}

// mustEmbedUnimplementedDbAuthServiceServer indicates an expected call of mustEmbedUnimplementedDbAuthServiceServer.
func (mr *MockDbAuthServiceServerMockRecorder) mustEmbedUnimplementedDbAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDbAuthServiceServer", reflect.TypeOf((*MockDbAuthServiceServer)(nil).mustEmbedUnimplementedDbAuthServiceServer))
}

// MockUnsafeDbAuthServiceServer is a mock of UnsafeDbAuthServiceServer interface.
type MockUnsafeDbAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDbAuthServiceServerMockRecorder
}

// MockUnsafeDbAuthServiceServerMockRecorder is the mock recorder for MockUnsafeDbAuthServiceServer.
type MockUnsafeDbAuthServiceServerMockRecorder struct {
	mock *MockUnsafeDbAuthServiceServer
}

// NewMockUnsafeDbAuthServiceServer creates a new mock instance.
func NewMockUnsafeDbAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeDbAuthServiceServer {
	mock := &MockUnsafeDbAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDbAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDbAuthServiceServer) EXPECT() *MockUnsafeDbAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDbAuthServiceServer mocks base method.
func (m *MockUnsafeDbAuthServiceServer) mustEmbedUnimplementedDbAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDbAuthServiceServer")
}

// mustEmbedUnimplementedDbAuthServiceServer indicates an expected call of mustEmbedUnimplementedDbAuthServiceServer.
func (mr *MockUnsafeDbAuthServiceServerMockRecorder) mustEmbedUnimplementedDbAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDbAuthServiceServer", reflect.TypeOf((*MockUnsafeDbAuthServiceServer)(nil).mustEmbedUnimplementedDbAuthServiceServer))
}
