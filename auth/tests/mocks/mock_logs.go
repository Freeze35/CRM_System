// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/logs/logs_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	logs "crmSystem/proto/logs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockLogsServiceClient is a mock of LogsServiceClient interface.
type MockLogsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogsServiceClientMockRecorder
}

// MockLogsServiceClientMockRecorder is the mock recorder for MockLogsServiceClient.
type MockLogsServiceClientMockRecorder struct {
	mock *MockLogsServiceClient
}

// NewMockLogsServiceClient creates a new mock instance.
func NewMockLogsServiceClient(ctrl *gomock.Controller) *MockLogsServiceClient {
	mock := &MockLogsServiceClient{ctrl: ctrl}
	mock.recorder = &MockLogsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogsServiceClient) EXPECT() *MockLogsServiceClientMockRecorder {
	return m.recorder
}

// SaveLogs mocks base method.
func (m *MockLogsServiceClient) SaveLogs(ctx context.Context, in *logs.LogRequest, opts ...grpc.CallOption) (*logs.LogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveLogs", varargs...)
	ret0, _ := ret[0].(*logs.LogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLogs indicates an expected call of SaveLogs.
func (mr *MockLogsServiceClientMockRecorder) SaveLogs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogs", reflect.TypeOf((*MockLogsServiceClient)(nil).SaveLogs), varargs...)
}

// MockLogsServiceServer is a mock of LogsServiceServer interface.
type MockLogsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLogsServiceServerMockRecorder
}

// MockLogsServiceServerMockRecorder is the mock recorder for MockLogsServiceServer.
type MockLogsServiceServerMockRecorder struct {
	mock *MockLogsServiceServer
}

// NewMockLogsServiceServer creates a new mock instance.
func NewMockLogsServiceServer(ctrl *gomock.Controller) *MockLogsServiceServer {
	mock := &MockLogsServiceServer{ctrl: ctrl}
	mock.recorder = &MockLogsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogsServiceServer) EXPECT() *MockLogsServiceServerMockRecorder {
	return m.recorder
}

// SaveLogs mocks base method.
func (m *MockLogsServiceServer) SaveLogs(arg0 context.Context, arg1 *logs.LogRequest) (*logs.LogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogs", arg0, arg1)
	ret0, _ := ret[0].(*logs.LogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLogs indicates an expected call of SaveLogs.
func (mr *MockLogsServiceServerMockRecorder) SaveLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogs", reflect.TypeOf((*MockLogsServiceServer)(nil).SaveLogs), arg0, arg1)
}

// mustEmbedUnimplementedLogsServiceServer mocks base method.
func (m *MockLogsServiceServer) mustEmbedUnimplementedLogsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLogsServiceServer")
}

// mustEmbedUnimplementedLogsServiceServer indicates an expected call of mustEmbedUnimplementedLogsServiceServer.
func (mr *MockLogsServiceServerMockRecorder) mustEmbedUnimplementedLogsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLogsServiceServer", reflect.TypeOf((*MockLogsServiceServer)(nil).mustEmbedUnimplementedLogsServiceServer))
}

// MockUnsafeLogsServiceServer is a mock of UnsafeLogsServiceServer interface.
type MockUnsafeLogsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLogsServiceServerMockRecorder
}

// MockUnsafeLogsServiceServerMockRecorder is the mock recorder for MockUnsafeLogsServiceServer.
type MockUnsafeLogsServiceServerMockRecorder struct {
	mock *MockUnsafeLogsServiceServer
}

// NewMockUnsafeLogsServiceServer creates a new mock instance.
func NewMockUnsafeLogsServiceServer(ctrl *gomock.Controller) *MockUnsafeLogsServiceServer {
	mock := &MockUnsafeLogsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLogsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLogsServiceServer) EXPECT() *MockUnsafeLogsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLogsServiceServer mocks base method.
func (m *MockUnsafeLogsServiceServer) mustEmbedUnimplementedLogsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLogsServiceServer")
}

// mustEmbedUnimplementedLogsServiceServer indicates an expected call of mustEmbedUnimplementedLogsServiceServer.
func (mr *MockUnsafeLogsServiceServerMockRecorder) mustEmbedUnimplementedLogsServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLogsServiceServer", reflect.TypeOf((*MockUnsafeLogsServiceServer)(nil).mustEmbedUnimplementedLogsServiceServer))
}
