services:
  db:
    restart: always
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - db-data:/var/lib/postgresql/data  # Используем volume для хранения данных
    ports:
      - "5432:5432"
    networks:
      - crm-network

  auth:
    build:
      context: .
      dockerfile: ./auth/Dockerfile
    env_file:
      - ./auth/.env
    depends_on:
      - db
    restart: always
    ports:
      - "50055:50055"
      - "50056:50056"
    networks:
      - crm-network

  admin_control:
    build:
      context: .
      dockerfile: ./admin_control/Dockerfile
    env_file:
      - ./admin_control/.env
    depends_on:
      - db
    restart: always
    ports:
      - "50070:50070"
    networks:
      - crm-network

  dbservice:
    build:
      context: .
      dockerfile: ./dbservice/Dockerfile
    env_file:
      - ./dbservice/.env
    depends_on:
      - db
    ports:
      - "8081:8081"
    restart: always
    networks:
      - crm-network

  timer:
    build:
      context: .
      dockerfile: ./timer/Dockerfile
    env_file:
      - ./timer/.env
    depends_on:
      - db
    ports:
      - "50020:50020"
    restart: always
    networks:
      - crm-network

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    restart: always
    networks:
      - crm-network

  redis:
    build:
      context: . # Путь к директории с Dockerfile
      dockerfile: ./redis/Dockerfile # Указываем Dockerfile
    ports:
      - "50060:50060" # Пробрасываем порт для gRPC сервиса
      - "6379:6379"   # Пробрасываем порт для Redis (если требуется доступ извне)
    restart: always
    volumes:
      - redis_data:/data # Хранилище данных Redis
    networks:
      - crm-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: adminrmq
      RABBITMQ_DEFAULT_PASS: passconnectmq
    networks:
      - crm-network

  email-service:
    build:
      context: . # Путь к директории с Dockerfile
      dockerfile: ./email-service/Dockerfile # Указываем Dockerfile
    depends_on:
      - rabbitmq
      - db
    restart: always
    ports:
      - "50051:50051"
    networks:
      - crm-network

  chats:
    build:
      context: . # Путь к директории с Dockerfile
      dockerfile: ./chats/Dockerfile # Указываем Dockerfile
    depends_on:
      - rabbitmq
    restart: always
    ports:
      - "50095:50095"
    networks:
      - crm-network

  #Логировщик-микросервис
  logs:
    build:
      context: . # Путь к директории с Dockerfile
      dockerfile: ./logs/Dockerfile # Указываем Dockerfile
    ports:
      - "50150:50150"
    restart: always
    networks:
      - crm-network


  #Хранение логов
  loki:
    build:
      context: .
      dockerfile: ./loki/Dockerfile  # Путь к Dockerfile для Loki
    ports:
      - "3100:3100"  # Порт для Loki
    restart: always
    networks:
      - crm-network

  #Визуализатор логов
  grafana:
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always
    depends_on:
      - loki
    networks:
      - crm-network

volumes:
  db-data:  # Определяем volume db-data
  redis_data:  # Объем данных для Redis

networks:
  crm-network:
    driver: bridge
