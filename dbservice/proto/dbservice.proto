syntax = "proto3";

package protobuff;

option go_package = "./dbservice/;dbservice";

service dbService {
  // Метод для регистрации
  rpc RegisterCompany (RegisterCompanyRequest) returns (RegisterCompanyResponse);
  // Метод для логинизации
  rpc LoginDB (LoginDBRequest) returns (LoginDBResponse);
  // Сохранения сообщения в базе данных
  rpc SaveMessage(SaveMessageRequest) returns (SaveMessageResponse);

  // Запускаем новый таймер
  rpc  StartTimerDB(StartEndTimerRequestDB) returns (StartEndTimerResponseDB);
  //Завершаем работу таймера
  rpc  EndTimerDB(StartEndTimerRequestDB) returns (StartEndTimerResponseDB);
  // Получаем активный таймер
  rpc  GetWorkingTimerDB(WorkingTimerRequestDB) returns (WorkingTimerResponseDB);
  //Изменяет таймер необходимым образом
  rpc  ChangeTimerDB(ChangeTimerRequestDB) returns (ChangeTimerResponseDB);
  // Добавляем необходимый таймер
  rpc  AddTimerDB(AddTimerRequestDB) returns (AddTimerResponseDB);
}

message RegisterCompanyRequest {
  string nameCompany = 1;
  string address = 2;
  string email = 4;
  string phone = 5;
  string password = 6;
}

message RegisterCompanyResponse {
  string message = 1;
  string database = 2;
  string userCompanyId = 3;
  uint32 status = 4;
}

message LoginDBRequest {
  string email = 1;
  string phone = 2;
  string password = 3;
}

message LoginDBResponse {
  string message = 1;
  string database = 2;
  string userCompanyId = 3;
  uint32 status = 4;
}

// Сообщение для запроса сохранения сообщения в базе данных
message SaveMessageRequest {
  string user_id = 1;         // ID пользователя
  string chat_id = 2;         // ID чата
  string message = 3;         // Текст сообщения
  string dbName = 4;         // Название базы данных
  int64 created_at = 5;       // Время создания сообщения (timestamp)
}

// Ответ для подтверждения сохранения сообщения
message SaveMessageResponse {
  string response = 1;           // Статус успеха
  uint32 status = 2;
}

//Раздел для работы с таймером

message StartEndTimerRequestDB{
  string userId = 1;
  string dbName = 2;
  string description = 3;
}

message StartEndTimerResponseDB{
  string  start_time = 1; // Время начала отсчёта таймера
  string  end_time = 2;   // Время окончания отсчёта таймера (опционально)
  uint64  timerId = 3;   // id таймера
  string message = 4;
  uint32 status = 5;
}

message WorkingTimerRequestDB{
  string userId = 1;
  string dbName = 2;
}

message WorkingTimerResponseDB{
  string  start_time = 1; // Время начала отсчёта таймера
  string  end_time = 2;   // Время окончания отсчёта таймера (опционально)
  uint64  timerId = 3;   // id таймера
  string  message = 4;
  uint32  status = 5;
}

message ChangeTimerRequestDB{
  string userId = 1;
  string dbName = 2;
  uint64 timerId = 3;
}

message ChangeTimerResponseDB{
  string  start_time = 1; // Время начала отсчёта таймера
  string  end_time = 2;   // Время окончания отсчёта таймера (опционально)
  string  duration = 3;   // Время окончания отсчёта таймера (опционально)
  string  description = 4;   // Время окончания отсчёта таймера (опционально)
  bool  active = 5;   // Время окончания отсчёта таймера (опционально)
  uint64 timerId = 6;
  string message = 7;
  uint32 status = 8;
}

message AddTimerRequestDB{
  string userId = 1;
  string dbName = 2;
  string startTime = 3;
  string endTime = 4;
  uint64 timerId = 5;
  string description = 6;
}

message AddTimerResponseDB{
  string start_time = 1; // Время начала отсчёта таймера
  string end_time = 2;   // Время окончания отсчёта таймера (опционально)
  string duration = 3;
  string description = 4;
  uint64 timerId = 5;
  string message = 6;
  uint32 status = 7;
}

