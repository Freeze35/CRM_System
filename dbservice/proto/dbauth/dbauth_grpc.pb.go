// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: dbservice/proto/dbauth.proto

package dbauth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DbAuthService_RegisterCompany_FullMethodName = "/protobuff.dbAuthService/RegisterCompany"
	DbAuthService_LoginDB_FullMethodName         = "/protobuff.dbAuthService/LoginDB"
)

// DbAuthServiceClient is the client API for DbAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbAuthServiceClient interface {
	// Метод для регистрации
	RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error)
	// Метод для логинизации
	LoginDB(ctx context.Context, in *LoginDBRequest, opts ...grpc.CallOption) (*LoginDBResponse, error)
}

type dbAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbAuthServiceClient(cc grpc.ClientConnInterface) DbAuthServiceClient {
	return &dbAuthServiceClient{cc}
}

func (c *dbAuthServiceClient) RegisterCompany(ctx context.Context, in *RegisterCompanyRequest, opts ...grpc.CallOption) (*RegisterCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterCompanyResponse)
	err := c.cc.Invoke(ctx, DbAuthService_RegisterCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAuthServiceClient) LoginDB(ctx context.Context, in *LoginDBRequest, opts ...grpc.CallOption) (*LoginDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginDBResponse)
	err := c.cc.Invoke(ctx, DbAuthService_LoginDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbAuthServiceServer is the server API for DbAuthService service.
// All implementations must embed UnimplementedDbAuthServiceServer
// for forward compatibility.
type DbAuthServiceServer interface {
	// Метод для регистрации
	RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error)
	// Метод для логинизации
	LoginDB(context.Context, *LoginDBRequest) (*LoginDBResponse, error)
	mustEmbedUnimplementedDbAuthServiceServer()
}

// UnimplementedDbAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDbAuthServiceServer struct{}

func (UnimplementedDbAuthServiceServer) RegisterCompany(context.Context, *RegisterCompanyRequest) (*RegisterCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedDbAuthServiceServer) LoginDB(context.Context, *LoginDBRequest) (*LoginDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDB not implemented")
}
func (UnimplementedDbAuthServiceServer) mustEmbedUnimplementedDbAuthServiceServer() {}
func (UnimplementedDbAuthServiceServer) testEmbeddedByValue()                       {}

// UnsafeDbAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbAuthServiceServer will
// result in compilation errors.
type UnsafeDbAuthServiceServer interface {
	mustEmbedUnimplementedDbAuthServiceServer()
}

func RegisterDbAuthServiceServer(s grpc.ServiceRegistrar, srv DbAuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedDbAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DbAuthService_ServiceDesc, srv)
}

func _DbAuthService_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAuthServiceServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbAuthService_RegisterCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAuthServiceServer).RegisterCompany(ctx, req.(*RegisterCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAuthService_LoginDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAuthServiceServer).LoginDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DbAuthService_LoginDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAuthServiceServer).LoginDB(ctx, req.(*LoginDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbAuthService_ServiceDesc is the grpc.ServiceDesc for DbAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.dbAuthService",
	HandlerType: (*DbAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCompany",
			Handler:    _DbAuthService_RegisterCompany_Handler,
		},
		{
			MethodName: "LoginDB",
			Handler:    _DbAuthService_LoginDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbservice/proto/dbauth.proto",
}
