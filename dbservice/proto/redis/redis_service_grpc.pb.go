// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: redis/proto/redis_service.proto

package redis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedisService_Save_FullMethodName = "/protobuff.RedisService/Save"
	RedisService_Get_FullMethodName  = "/protobuff.RedisService/Get"
)

// RedisServiceClient is the client API for RedisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisServiceClient interface {
	// Метод для регистрации
	Save(ctx context.Context, in *SaveRedisRequest, opts ...grpc.CallOption) (*SaveRedisResponse, error)
	Get(ctx context.Context, in *GetRedisRequest, opts ...grpc.CallOption) (*GetRedisResponse, error)
}

type redisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisServiceClient(cc grpc.ClientConnInterface) RedisServiceClient {
	return &redisServiceClient{cc}
}

func (c *redisServiceClient) Save(ctx context.Context, in *SaveRedisRequest, opts ...grpc.CallOption) (*SaveRedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveRedisResponse)
	err := c.cc.Invoke(ctx, RedisService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisServiceClient) Get(ctx context.Context, in *GetRedisRequest, opts ...grpc.CallOption) (*GetRedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRedisResponse)
	err := c.cc.Invoke(ctx, RedisService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisServiceServer is the server API for RedisService service.
// All implementations must embed UnimplementedRedisServiceServer
// for forward compatibility.
type RedisServiceServer interface {
	// Метод для регистрации
	Save(context.Context, *SaveRedisRequest) (*SaveRedisResponse, error)
	Get(context.Context, *GetRedisRequest) (*GetRedisResponse, error)
	mustEmbedUnimplementedRedisServiceServer()
}

// UnimplementedRedisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedisServiceServer struct{}

func (UnimplementedRedisServiceServer) Save(context.Context, *SaveRedisRequest) (*SaveRedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedRedisServiceServer) Get(context.Context, *GetRedisRequest) (*GetRedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisServiceServer) mustEmbedUnimplementedRedisServiceServer() {}
func (UnimplementedRedisServiceServer) testEmbeddedByValue()                      {}

// UnsafeRedisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisServiceServer will
// result in compilation errors.
type UnsafeRedisServiceServer interface {
	mustEmbedUnimplementedRedisServiceServer()
}

func RegisterRedisServiceServer(s grpc.ServiceRegistrar, srv RedisServiceServer) {
	// If the following call pancis, it indicates UnimplementedRedisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedisService_ServiceDesc, srv)
}

func _RedisService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Save(ctx, req.(*SaveRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRedisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisServiceServer).Get(ctx, req.(*GetRedisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisService_ServiceDesc is the grpc.ServiceDesc for RedisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuff.RedisService",
	HandlerType: (*RedisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _RedisService_Save_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RedisService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis/proto/redis_service.proto",
}
