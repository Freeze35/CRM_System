// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/email-service/email_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	email "crmSystem/proto/email-service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEmailServiceClient is a mock of EmailServiceClient interface.
type MockEmailServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceClientMockRecorder
}

// MockEmailServiceClientMockRecorder is the mock recorder for MockEmailServiceClient.
type MockEmailServiceClientMockRecorder struct {
	mock *MockEmailServiceClient
}

// NewMockEmailServiceClient creates a new mock instance.
func NewMockEmailServiceClient(ctrl *gomock.Controller) *MockEmailServiceClient {
	mock := &MockEmailServiceClient{ctrl: ctrl}
	mock.recorder = &MockEmailServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceClient) EXPECT() *MockEmailServiceClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailServiceClient) SendEmail(ctx context.Context, in *email.SendEmailRequest, opts ...grpc.CallOption) (*email.SendEmailResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendEmail", varargs...)
	ret0, _ := ret[0].(*email.SendEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServiceClientMockRecorder) SendEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailServiceClient)(nil).SendEmail), varargs...)
}

// MockEmailServiceServer is a mock of EmailServiceServer interface.
type MockEmailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceServerMockRecorder
}

// MockEmailServiceServerMockRecorder is the mock recorder for MockEmailServiceServer.
type MockEmailServiceServerMockRecorder struct {
	mock *MockEmailServiceServer
}

// NewMockEmailServiceServer creates a new mock instance.
func NewMockEmailServiceServer(ctrl *gomock.Controller) *MockEmailServiceServer {
	mock := &MockEmailServiceServer{ctrl: ctrl}
	mock.recorder = &MockEmailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailServiceServer) EXPECT() *MockEmailServiceServerMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailServiceServer) SendEmail(arg0 context.Context, arg1 *email.SendEmailRequest) (*email.SendEmailResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", arg0, arg1)
	ret0, _ := ret[0].(*email.SendEmailResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailServiceServerMockRecorder) SendEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailServiceServer)(nil).SendEmail), arg0, arg1)
}

// mustEmbedUnimplementedEmailServiceServer mocks base method.
func (m *MockEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServiceServer")
}

// mustEmbedUnimplementedEmailServiceServer indicates an expected call of mustEmbedUnimplementedEmailServiceServer.
func (mr *MockEmailServiceServerMockRecorder) mustEmbedUnimplementedEmailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServiceServer", reflect.TypeOf((*MockEmailServiceServer)(nil).mustEmbedUnimplementedEmailServiceServer))
}

// MockUnsafeEmailServiceServer is a mock of UnsafeEmailServiceServer interface.
type MockUnsafeEmailServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEmailServiceServerMockRecorder
}

// MockUnsafeEmailServiceServerMockRecorder is the mock recorder for MockUnsafeEmailServiceServer.
type MockUnsafeEmailServiceServerMockRecorder struct {
	mock *MockUnsafeEmailServiceServer
}

// NewMockUnsafeEmailServiceServer creates a new mock instance.
func NewMockUnsafeEmailServiceServer(ctrl *gomock.Controller) *MockUnsafeEmailServiceServer {
	mock := &MockUnsafeEmailServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEmailServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEmailServiceServer) EXPECT() *MockUnsafeEmailServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEmailServiceServer mocks base method.
func (m *MockUnsafeEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEmailServiceServer")
}

// mustEmbedUnimplementedEmailServiceServer indicates an expected call of mustEmbedUnimplementedEmailServiceServer.
func (mr *MockUnsafeEmailServiceServerMockRecorder) mustEmbedUnimplementedEmailServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEmailServiceServer", reflect.TypeOf((*MockUnsafeEmailServiceServer)(nil).mustEmbedUnimplementedEmailServiceServer))
}
