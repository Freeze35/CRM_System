// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/dbadmin/dbadmin_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dbadmin "crmSystem/proto/dbadmin"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDbAdminServiceClient is a mock of DbAdminServiceClient interface.
type MockDbAdminServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDbAdminServiceClientMockRecorder
}

// MockDbAdminServiceClientMockRecorder is the mock recorder for MockDbAdminServiceClient.
type MockDbAdminServiceClientMockRecorder struct {
	mock *MockDbAdminServiceClient
}

// NewMockDbAdminServiceClient creates a new mock instance.
func NewMockDbAdminServiceClient(ctrl *gomock.Controller) *MockDbAdminServiceClient {
	mock := &MockDbAdminServiceClient{ctrl: ctrl}
	mock.recorder = &MockDbAdminServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbAdminServiceClient) EXPECT() *MockDbAdminServiceClientMockRecorder {
	return m.recorder
}

// RegisterUsersInCompany mocks base method.
func (m *MockDbAdminServiceClient) RegisterUsersInCompany(ctx context.Context, in *dbadmin.RegisterUsersRequest, opts ...grpc.CallOption) (*dbadmin.RegisterUsersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUsersInCompany", varargs...)
	ret0, _ := ret[0].(*dbadmin.RegisterUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUsersInCompany indicates an expected call of RegisterUsersInCompany.
func (mr *MockDbAdminServiceClientMockRecorder) RegisterUsersInCompany(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUsersInCompany", reflect.TypeOf((*MockDbAdminServiceClient)(nil).RegisterUsersInCompany), varargs...)
}

// MockDbAdminServiceServer is a mock of DbAdminServiceServer interface.
type MockDbAdminServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDbAdminServiceServerMockRecorder
}

// MockDbAdminServiceServerMockRecorder is the mock recorder for MockDbAdminServiceServer.
type MockDbAdminServiceServerMockRecorder struct {
	mock *MockDbAdminServiceServer
}

// NewMockDbAdminServiceServer creates a new mock instance.
func NewMockDbAdminServiceServer(ctrl *gomock.Controller) *MockDbAdminServiceServer {
	mock := &MockDbAdminServiceServer{ctrl: ctrl}
	mock.recorder = &MockDbAdminServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbAdminServiceServer) EXPECT() *MockDbAdminServiceServerMockRecorder {
	return m.recorder
}

// RegisterUsersInCompany mocks base method.
func (m *MockDbAdminServiceServer) RegisterUsersInCompany(arg0 context.Context, arg1 *dbadmin.RegisterUsersRequest) (*dbadmin.RegisterUsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUsersInCompany", arg0, arg1)
	ret0, _ := ret[0].(*dbadmin.RegisterUsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUsersInCompany indicates an expected call of RegisterUsersInCompany.
func (mr *MockDbAdminServiceServerMockRecorder) RegisterUsersInCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUsersInCompany", reflect.TypeOf((*MockDbAdminServiceServer)(nil).RegisterUsersInCompany), arg0, arg1)
}

// mustEmbedUnimplementedDbAdminServiceServer mocks base method.
func (m *MockDbAdminServiceServer) mustEmbedUnimplementedDbAdminServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDbAdminServiceServer")
}

// mustEmbedUnimplementedDbAdminServiceServer indicates an expected call of mustEmbedUnimplementedDbAdminServiceServer.
func (mr *MockDbAdminServiceServerMockRecorder) mustEmbedUnimplementedDbAdminServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDbAdminServiceServer", reflect.TypeOf((*MockDbAdminServiceServer)(nil).mustEmbedUnimplementedDbAdminServiceServer))
}

// MockUnsafeDbAdminServiceServer is a mock of UnsafeDbAdminServiceServer interface.
type MockUnsafeDbAdminServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeDbAdminServiceServerMockRecorder
}

// MockUnsafeDbAdminServiceServerMockRecorder is the mock recorder for MockUnsafeDbAdminServiceServer.
type MockUnsafeDbAdminServiceServerMockRecorder struct {
	mock *MockUnsafeDbAdminServiceServer
}

// NewMockUnsafeDbAdminServiceServer creates a new mock instance.
func NewMockUnsafeDbAdminServiceServer(ctrl *gomock.Controller) *MockUnsafeDbAdminServiceServer {
	mock := &MockUnsafeDbAdminServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeDbAdminServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeDbAdminServiceServer) EXPECT() *MockUnsafeDbAdminServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedDbAdminServiceServer mocks base method.
func (m *MockUnsafeDbAdminServiceServer) mustEmbedUnimplementedDbAdminServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedDbAdminServiceServer")
}

// mustEmbedUnimplementedDbAdminServiceServer indicates an expected call of mustEmbedUnimplementedDbAdminServiceServer.
func (mr *MockUnsafeDbAdminServiceServerMockRecorder) mustEmbedUnimplementedDbAdminServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedDbAdminServiceServer", reflect.TypeOf((*MockUnsafeDbAdminServiceServer)(nil).mustEmbedUnimplementedDbAdminServiceServer))
}
